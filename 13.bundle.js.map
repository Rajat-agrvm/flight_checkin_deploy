{"version":3,"sources":["webpack:///./src/components/dashboard/StaffDashboardPage.js","webpack:///./src/api/flightApi.js","webpack:///./src/redux/actions/flightActions.js","webpack:///./src/components/common/SelectInput.js"],"names":["mapDispatchToProps","loadFlights","loadPassengers","connect","state","checkedInFlights","flights","length","passengers","filter","flight","passengerCount","p","flightId","id","allReserved","passenger","seat","status","history","props","useState","setCheckedInFlights","useEffect","catch","error","alert","className","htmlFor","onClick","event","preventDefault","push","name","label","value","defaultOption","options","map","text","onChange","target","baseUrl","process","dispatch","fetch","then","handleResponse","handleError","type","types","loadFlightsSuccess","saveFlight","getState","method","headers","body","JSON","stringify","flightApi","savedFlight","updateFlightSuccess","createFlightSuccess","SelectInput","option","key"],"mappings":"sLAgHA,IAAMA,EAAqB,CACzBC,gBACAC,oBAEaC,uBA3Bf,SAAyBC,GAgBvB,MAAO,CACLC,iBAfAD,EAAME,QAAQC,OAAS,GAAKH,EAAMI,WAAWD,OAAS,EAClDH,EAAME,QAAQG,QAAO,SAACC,GACpB,IAAMC,EAAiBP,EAAMI,WAAWC,QACtC,SAACG,GAAD,OAAOA,EAAEC,WAAaH,EAAOI,MAC7BP,OACIQ,EAKS,IAJbX,EAAMI,WAAWC,QACf,SAACO,GAAD,OACEA,EAAUH,WAAaH,EAAOI,MAC5BE,EAAUC,MAA6B,cAArBD,EAAUE,WAChCX,OACJ,OAAOI,EAAiB,GAAKI,KAE/B,GAGJP,WAAYJ,EAAMI,WAClBF,QAASF,EAAME,WAQqBN,EAAzBG,EA5Gf,YAOG,IANDF,EAMC,EANDA,YACAK,EAKC,EALDA,QACAE,EAIC,EAJDA,WACAN,EAGC,EAHDA,eACAiB,EAEC,EAFDA,QACGC,EACF,mFAC+CC,mBAAS,YACpDD,EAAMf,mBAFV,mBACMA,EADN,KACwBiB,EADxB,KA4BD,OAxBAC,qBAAU,WACe,IAAnBjB,EAAQC,QACVN,IAAcuB,OAAM,SAACC,GAAD,OAAWC,MAAM,0BAA4BD,MAEzC,IAAtBjB,EAAWD,OACbL,IAAiBsB,OAAM,SAACC,GAAD,OACrBC,MAAM,0BAA4BD,MAE3BnB,EAAQC,OAAS,GAC1Be,EAAoB,YAAIF,EAAMf,qBAE/B,CAACe,EAAMf,mBAcR,oCACE,+CACoB,IAAnBC,EAAQC,QAAsC,IAAtBC,EAAWD,OAClC,kBAAC,IAAD,MAEA,oCACE,8BACE,yBAAKoB,UAAU,cACb,2BAAOC,QAAQ,eAAf,6BACA,yBAAKD,UAAU,SACb,4BAAQA,UAAU,kBAAkBE,QAtBlD,SAAqBC,GACnBA,EAAMC,iBACNZ,EAAQa,KAAK,oBAoBD,iBAKJ,kBAAC,IAAD,CACEC,KAAK,iBACLC,MAAM,oBACNC,MAAO,GACPC,cAAc,gBACdC,QAAShC,EAAiBiC,KAAI,SAAC5B,GAAD,MAAa,CACzCyB,MAAOzB,EAAOuB,KACdM,KAAM7B,EAAOuB,SAEfO,SA/BZ,SAAsBV,GACpBA,EAAMC,iBADqB,IAEnBI,EAAUL,EAAMW,OAAhBN,MACRhB,EAAQa,KAAK,oBAAsBG,OA+B7B,uBAAGR,UAAU,eAAb,+D,mDCtEJe,EAAUC,4ECcT,SAAS1C,IACd,OAAO,SAAU2C,GAEf,ODdKC,MAAMH,GAASI,KAAKC,KAAgBvB,MAAMwB,KCgB5CF,MAAK,SAACxC,GACLsC,EAlBD,SAA4BtC,GACjC,MAAO,CAAE2C,KAAMC,IAA4B5C,WAiB5B6C,CAAmB7C,OAE7BkB,OAAM,SAACC,GAEN,MAAMA,MAIP,SAAS2B,EAAW1C,GACzB,OAAO,SAAUkC,EAAUS,GAEzB,ODzBG,SAAoB3C,GACzB,OAAOmC,MAAMH,GAAWhC,EAAOI,IAAM,IAAK,CACxCwC,OAAQ5C,EAAOI,GAAK,MAAQ,OAC5ByC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUhD,KAEpBoC,KAAKC,KACLvB,MAAMwB,KCkBAW,CACOjD,GACXoC,MAAK,SAACc,GACLlD,EAAOI,GACH8B,EAzBL,SAA6BlC,GAClC,MAAO,CAAEuC,KAAMC,IAA6BxC,UAwBzBmD,CAAoBD,IAC7BhB,EA9BL,SAA6BlC,GAClC,MAAO,CAAEuC,KAAMC,IAA6BxC,UA6BzBoD,CAAoBF,OAElCpC,OAAM,SAACC,GAEN,MAAMA,MAzCd,qE,gCCAA,oBAoDesC,IAjDK,SAAC,GAQf,IAPJ9B,EAOI,EAPJA,KACAC,EAMI,EANJA,MACAM,EAKI,EALJA,SACAJ,EAII,EAJJA,cACAD,EAGI,EAHJA,MACAV,EAEI,EAFJA,MACAY,EACI,EADJA,QAEA,OACE,yBAAKV,UAAU,cACb,2BAAOC,QAASK,GAAOC,GACvB,yBAAKP,UAAU,SAEb,4BACEM,KAAMA,EACNE,MAAOA,EACPK,SAAUA,EACVb,UAAU,gBAEV,4BAAQQ,MAAM,IAAIC,GACjBC,EAAQC,KAAI,SAAC0B,GACZ,OACE,4BAAQC,IAAKD,EAAO7B,MAAOA,MAAO6B,EAAO7B,OACtC6B,EAAOzB,UAKfd,GAAS,yBAAKE,UAAU,sBAAsBF","file":"13.bundle.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { loadFlights } from \"../../redux/actions/flightActions\";\r\nimport { loadPassengers } from \"../../redux/actions/passengerActions\";\r\nimport SelectInput from \"../common/SelectInput\";\r\nimport Spinner from \"../common/Spinner\";\r\n\r\nfunction StaffDashboardPage({\r\n  loadFlights,\r\n  flights,\r\n  passengers,\r\n  loadPassengers,\r\n  history,\r\n  ...props\r\n}) {\r\n  const [checkedInFlights, setCheckedInFlights] = useState([\r\n    ...props.checkedInFlights,\r\n  ]);\r\n  useEffect(() => {\r\n    if (flights.length === 0) {\r\n      loadFlights().catch((error) => alert(\"Loading flights failed \" + error));\r\n    }\r\n    if (passengers.length === 0) {\r\n      loadPassengers().catch((error) =>\r\n        alert(\"Loading flights failed \" + error)\r\n      );\r\n    } else if (flights.length > 0) {\r\n      setCheckedInFlights([...props.checkedInFlights]);\r\n    }\r\n  }, [props.checkedInFlights]);\r\n\r\n  function handleClick(event) {\r\n    event.preventDefault();\r\n    history.push(\"/staff/flights\");\r\n  }\r\n\r\n  function handleChange(event) {\r\n    event.preventDefault();\r\n    const { value } = event.target;\r\n    history.push(\"/staff/in-flight/\" + value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>Staff Dashboard</h2>\r\n      {flights.length === 0 || passengers.length === 0 ? (\r\n        <Spinner />\r\n      ) : (\r\n        <>\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"Flight List\">Flight List for Check-In:</label>\r\n              <div className=\"field\">\r\n                <button className=\"btn btn-primary\" onClick={handleClick}>\r\n                  Flight List\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <SelectInput\r\n              name=\"InFlightOption\"\r\n              label=\"In-Flight Option:\"\r\n              value={\"\"}\r\n              defaultOption=\"Select Flight\"\r\n              options={checkedInFlights.map((flight) => ({\r\n                value: flight.name,\r\n                text: flight.name,\r\n              }))}\r\n              onChange={handleChange}\r\n            />\r\n          </form>\r\n          <p className=\"information\">\r\n            ** In-Flight Option will only show checked-In flights\r\n          </p>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nStaffDashboardPage.propTypes = {\r\n  flights: PropTypes.array.isRequired,\r\n  passengers: PropTypes.array.isRequired,\r\n  loadFlights: PropTypes.func.isRequired,\r\n  loadPassengers: PropTypes.func.isRequired,\r\n  checkedInFlights: PropTypes.array.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  const checkedInFlights =\r\n    state.flights.length > 0 && state.passengers.length > 0\r\n      ? state.flights.filter((flight) => {\r\n          const passengerCount = state.passengers.filter(\r\n            (p) => p.flightId === flight.id\r\n          ).length;\r\n          const allReserved =\r\n            state.passengers.filter(\r\n              (passenger) =>\r\n                passenger.flightId === flight.id &&\r\n                (!passenger.seat || passenger.status === \"available\")\r\n            ).length === 0;\r\n          return passengerCount > 0 && allReserved;\r\n        })\r\n      : [];\r\n  return {\r\n    checkedInFlights,\r\n    passengers: state.passengers,\r\n    flights: state.flights,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadFlights,\r\n  loadPassengers,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StaffDashboardPage);\r\n","import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.API_URL + \"/flights/\";\n\nexport function getFlights() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\n\nexport function saveFlight(flight) {\n  return fetch(baseUrl + (flight.id || \"\"), {\n    method: flight.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(flight),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n","/* eslint-disable no-unused-vars */\r\nimport * as types from \"./actionTypes\";\r\nimport * as flightApi from \"../../api/flightApi\";\r\nexport function loadFlightsSuccess(flights) {\r\n  return { type: types.LOAD_FLIGHTS_SUCCESS, flights };\r\n}\r\n\r\nexport function createFlightSuccess(flight) {\r\n  return { type: types.CREATE_FLIGHT_SUCCESS, flight };\r\n}\r\n\r\nexport function updateFlightSuccess(flight) {\r\n  return { type: types.UPDATE_FLIGHT_SUCCESS, flight };\r\n}\r\n\r\nexport function loadFlights() {\r\n  return function (dispatch) {\r\n    // dispatch(beginApiCall());\r\n    return flightApi\r\n      .getFlights()\r\n      .then((flights) => {\r\n        dispatch(loadFlightsSuccess(flights));\r\n      })\r\n      .catch((error) => {\r\n        // dispatch(apiCallError(error));\r\n        throw error;\r\n      });\r\n  };\r\n}\r\nexport function saveFlight(flight) {\r\n  return function (dispatch, getState) {\r\n    // dispatch(beginApiCall());\r\n    return flightApi\r\n      .saveFlight(flight)\r\n      .then((savedFlight) => {\r\n        flight.id\r\n          ? dispatch(updateFlightSuccess(savedFlight))\r\n          : dispatch(createFlightSuccess(savedFlight));\r\n      })\r\n      .catch((error) => {\r\n        // dispatch(apiCallError(error));\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SelectInput = ({\n  name,\n  label,\n  onChange,\n  defaultOption,\n  value,\n  error,\n  options,\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <div className=\"field\">\n        {/* Note, value is set here rather than on the option - docs: https://facebook.github.io/react/docs/forms.html */}\n        <select\n          name={name}\n          value={value}\n          onChange={onChange}\n          className=\"form-control\"\n        >\n          <option value=\"\">{defaultOption}</option>\n          {options.map((option) => {\n            return (\n              <option key={option.value} value={option.value}>\n                {option.text}\n              </option>\n            );\n          })}\n        </select>\n        {error && <div className=\"alert alert-danger\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nSelectInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  defaultOption: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.bool,\n  ]),\n  error: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default SelectInput;\n"],"sourceRoot":""}