{"version":3,"sources":["webpack:///./src/components/flights/FlightsPageAdmin.js","webpack:///./src/api/ancillaryApi.js","webpack:///./src/redux/actions/ancillaryActions.js"],"names":["FlightsPageAdmin","this","props","loadFlights","flights","ancillaries","loadAncillaries","length","catch","error","alert","style","marginTop","marginBottom","float","className","to","isAdmin","React","Component","connect","state","map","flight","ancillariesNode","find","a","id","ancillariesId","dispatch","bindActionCreators","flightActions","ancillaryActions","baseUrl","process","fetch","then","handleResponse","handleError","type","types","loadAncillariesSuccess","saveAncillary","ancillary","getState","method","headers","body","JSON","stringify","ancillaryApi","savedAncillary","updateAncillarySuccess","createAncillarySuccess"],"mappings":"8NAWMA,E,4LACgB,MAQdC,KAAKC,MANPC,EAFgB,EAEhBA,YACAC,EAHgB,EAGhBA,QAGAC,EANgB,EAMhBA,YACAC,EAPgB,EAOhBA,gBAEqB,IAAnBF,EAAQG,QACVJ,IAAcK,OAAM,SAACC,GAAD,OAAWC,MAAM,0BAA4BD,MAOxC,IAAvBJ,EAAYE,QACdD,IAAkBE,OAAM,SAACC,GAAD,OACtBC,MAAM,8BAAgCD,Q,+BAK1C,OACE,oCACE,uCAC+B,IAA9BR,KAAKC,MAAME,QAAQG,QACc,IAAlCN,KAAKC,MAAMG,YAAYE,OACrB,kBAAC,IAAD,MAEA,oCACE,kBAAC,IAAD,CACEI,MAAO,CAAEC,UAAW,GAAIC,aAAc,GAAIC,MAAO,QACjDC,UAAU,kBACVC,GAAG,oBAHL,QAOA,kBAAC,IAAD,CACEC,SAAS,EAETb,QAASH,KAAKC,MAAME,gB,GA3CHc,IAAMC,WA4FtBC,uBA/Bf,SAAyBC,GACvB,MAAO,CACLjB,QAC+B,IAA7BiB,EAAMhB,YAAYE,OACd,GACAc,EAAMjB,QAAQkB,KAAI,SAACC,GACjB,sBACKA,EADL,CAEEC,gBAAiBH,EAAMhB,YAAYoB,MACjC,SAACC,GAAD,OAAOA,EAAEC,KAAOJ,EAAOK,sBAInCvB,YAAagB,EAAMhB,gBAIvB,SAA4BwB,GAC1B,MAAO,CACL1B,YAAa2B,YAAmBC,IAA2BF,GAC3DvB,gBAAiBwB,YACfE,IACAH,MASST,CAA6CpB,I,mDCtGtDiC,EAAUC,gFCeT,SAAS5B,IACd,OAAO,SAAUuB,GAEf,ODfKM,MAAMF,GAASG,KAAKC,KAAgB7B,MAAM8B,KCiB5CF,MAAK,SAAC/B,GACLwB,EAlBD,SAAgCxB,GACrC,MAAO,CAAEkC,KAAMC,IAAgCnC,eAiBhCoC,CAAuBpC,OAEjCG,OAAM,SAACC,GAEN,MAAMA,MAKP,SAASiC,EAAcC,GAC5B,OAAO,SAAUd,EAAUe,GAEzB,OD3BG,SAAuBD,GAC5B,OAAOR,MAAMF,GAAWU,EAAUhB,IAAM,IAAK,CAC3CkB,OAAQF,EAAUhB,GAAK,MAAQ,OAC/BmB,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUN,KAEpBP,KAAKC,KACL7B,MAAM8B,KCoBAY,CACUP,GACdP,MAAK,SAACe,GACLR,EAAUhB,GACNE,EA1BL,SAAgCc,GACrC,MAAO,CAAEJ,KAAMC,IAAgCG,aAyB5BS,CAAuBD,IAChCtB,EA/BL,SAAgCc,GACrC,MAAO,CAAEJ,KAAMC,IAAgCG,aA8B5BU,CAAuBF,OAErC3C,OAAM,SAACC,GAEN,MAAMA,MA3Cd","file":"15.bundle.js","sourcesContent":["import React from \"react\";\r\nimport FlightList from \"./FlightList\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as flightActions from \"../../redux/actions/flightActions\";\r\nimport * as ancillaryActions from \"../../redux/actions/ancillaryActions\";\r\n// import * as passengerActions from \"../../redux/actions/passengerActions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../common/Spinner\";\r\n\r\nclass FlightsPageAdmin extends React.Component {\r\n  componentDidMount() {\r\n    const {\r\n      loadFlights,\r\n      flights,\r\n      // passengers,\r\n      // loadPassengers,\r\n      ancillaries,\r\n      loadAncillaries,\r\n    } = this.props;\r\n    if (flights.length === 0) {\r\n      loadFlights().catch((error) => alert(\"Loading flights failed \" + error));\r\n    }\r\n    // if (passengers.length === 0) {\r\n    //   loadPassengers().catch((error) =>\r\n    //     alert(\"Loading passengers failed \" + error)\r\n    //   );\r\n    // }\r\n    if (ancillaries.length === 0) {\r\n      loadAncillaries().catch((error) =>\r\n        alert(\"Loading ancillaries failed \" + error)\r\n      );\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2>Flights</h2>\r\n        {this.props.flights.length === 0 ||\r\n        this.props.ancillaries.length === 0 ? (\r\n          <Spinner />\r\n        ) : (\r\n          <>\r\n            <Link\r\n              style={{ marginTop: 10, marginBottom: 20, float: \"left\" }}\r\n              className=\"btn btn-primary\"\r\n              to=\"/admin/dashboard\"\r\n            >\r\n              Back\r\n            </Link>\r\n            <FlightList\r\n              isAdmin={true}\r\n              // ancillaries={this.props.ancillaries}\r\n              flights={this.props.flights}\r\n            ></FlightList>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nFlightsPageAdmin.propTypes = {\r\n  flights: PropTypes.array.isRequired,\r\n  ancillaries: PropTypes.array.isRequired,\r\n  // passengers: PropTypes.array.isRequired,\r\n  loadFlights: PropTypes.func.isRequired,\r\n  loadAncillaries: PropTypes.func.isRequired,\r\n  // loadPassengers: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    flights:\r\n      state.ancillaries.length === 0\r\n        ? []\r\n        : state.flights.map((flight) => {\r\n            return {\r\n              ...flight,\r\n              ancillariesNode: state.ancillaries.find(\r\n                (a) => a.id === flight.ancillariesId\r\n              ),\r\n            };\r\n          }),\r\n    ancillaries: state.ancillaries,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    loadFlights: bindActionCreators(flightActions.loadFlights, dispatch),\r\n    loadAncillaries: bindActionCreators(\r\n      ancillaryActions.loadAncillaries,\r\n      dispatch\r\n    ),\r\n    // loadPassengers: bindActionCreators(\r\n    //   passengerActions.loadPassengers,\r\n    //   dispatch\r\n    // ),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FlightsPageAdmin);\r\n","import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.API_URL + \"/ancillaries/\";\n\nexport function getAncillaries() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\n\nexport function saveAncillary(ancillary) {\n  return fetch(baseUrl + (ancillary.id || \"\"), {\n    method: ancillary.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(ancillary),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n","/* eslint-disable no-unused-vars */\r\nimport * as types from \"./actionTypes\";\r\nimport * as ancillaryApi from \"../../api/ancillaryApi\";\r\n\r\nexport function loadAncillariesSuccess(ancillaries) {\r\n  return { type: types.LOAD_ANCILLARIES_SUCCESS, ancillaries };\r\n}\r\n\r\nexport function createAncillarySuccess(ancillary) {\r\n  return { type: types.CREATE_ANCILLARY_SUCCESS, ancillary };\r\n}\r\n\r\nexport function updateAncillarySuccess(ancillary) {\r\n  return { type: types.UPDATE_ANCILLARY_SUCCESS, ancillary };\r\n}\r\n\r\nexport function loadAncillaries() {\r\n  return function (dispatch) {\r\n    // dispatch(beginApiCall());\r\n    return ancillaryApi\r\n      .getAncillaries()\r\n      .then((ancillaries) => {\r\n        dispatch(loadAncillariesSuccess(ancillaries));\r\n      })\r\n      .catch((error) => {\r\n        // dispatch(apiCallError(error));\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\nexport function saveAncillary(ancillary) {\r\n  return function (dispatch, getState) {\r\n    // dispatch(beginApiCall());\r\n    return ancillaryApi\r\n      .saveAncillary(ancillary)\r\n      .then((savedAncillary) => {\r\n        ancillary.id\r\n          ? dispatch(updateAncillarySuccess(savedAncillary))\r\n          : dispatch(createAncillarySuccess(savedAncillary));\r\n      })\r\n      .catch((error) => {\r\n        // dispatch(apiCallError(error));\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n"],"sourceRoot":""}